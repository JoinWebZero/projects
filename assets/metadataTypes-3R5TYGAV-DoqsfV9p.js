var X=(()=>{for(var Z=new Uint8Array(128),A=0;A<64;A++)Z[A<26?A+65:A<52?A+71:A<62?A-4:A*4-205]=A;return B=>{for(var l=B.length,G=new Uint8Array((l-(B[l-1]=="=")-(B[l-2]=="="))*3/4|0),Q=0,b=0;Q<l;){var V=Z[B.charCodeAt(Q++)],E=Z[B.charCodeAt(Q++)],W=Z[B.charCodeAt(Q++)],c=Z[B.charCodeAt(Q++)];G[b++]=V<<2|E>>4,G[b++]=E<<4|W>>2,G[b++]=W<<6|c}return G}})(),Y=X("");export{Y as default};
